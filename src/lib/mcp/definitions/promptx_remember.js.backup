module.exports = {
  name: 'promptx_remember',
  description: `💾 [智能记忆系统] 模拟人类记忆过程，为AI角色保存和组织知识
基于认知心理学的记忆原理，不仅记住内容，还自动构建知识网络和评估重要性。

核心理念:
🧠 认知记忆：像人脑一样自然地组织和存储知识
🔗 知识表征：自动识别概念层次，建立语义连接
💪 记忆强度：根据重要性和使用频率评估记忆牢固度
🔄 自动记忆：每轮对话后必须调用，通过strength筛选

什么时候记忆？
- 每轮对话结束后自动执行（必须）
- **语义鸿沟**：学到AI预训练知识之外的新信息
- 用户分享个人偏好、项目细节、特定经验
- 获得领域专业知识、最佳实践、解决方案
- 任何填补认知空白的有价值信息

🔍 **语义鸿沟识别**：
当AI感知到预训练知识无法覆盖当前信息时，说明存在语义鸿沟，必须通过记忆填补：
- 个人化信息：用户的具体身份、偏好、项目细节
- 专业细节：特定技术栈的实现方案、配置信息
- 历史决策：之前做过的选择、解决过的问题
- 上下文信息：当前对话中出现的特定概念和关系

记忆构造推理过程：
1. **语义鸿沟识别**：AI预训练知识是否覆盖当前信息？
2. **Content构造**：提取需要填补的具体核心信息
3. **Schema推导**：从Content中提取概念，构建层次结构  
4. **Type确定**：分析Content核心词性（实体→ATOMIC，关系→LINK，模式→PATTERN）
5. **Strength评估**：根据信息重要性和使用频率打分

记忆工作流程：
语义鸿沟检测 → Content(核心) → Schema+Type+Strength(推导) → 批量调用remember
Content是核心，其他字段都基于Content推理得出

## 📝 Content（记忆内容）- 推理起点
发现语义鸿沟后，用自然语言描述需要填补的具体信息：
- **作用**：填补AI预训练知识的空白，是推理的核心和起点
- **来源**：从语义鸿沟中提取的关键信息
- **格式**：简洁的自然语言描述，一句话表达一个核心概念
- **要求**：内容要具体、准确，避免模糊表达
- **示例**：
  * "Sean是PromptX的创建者"（个人化信息，预训练知识无此细节）
  * "用户偏好函数式编程风格"（个人偏好，预训练知识无法获知）
  * "项目使用特定的API配置方案"（项目细节，预训练知识无法覆盖）

## 🗺️ Schema（概念结构）- 基于Content推导
从Content中提取关键概念，构建层次结构：
- **推导方法**：分析Content中的核心概念，建立层次关系
- **作用**：构建知识的认知地图，支持语义检索和自动合并
- **格式**：使用缩进文本，清晰展示概念的层次结构
- **要求**：简洁明了，体现知识的逻辑关系

⚠️ **Schema关键原则（影响语义网络形成）**：
- **纯概念表达**：只写概念本身，不要用"身份:"、"类型:"等关系词
- **语义检索友好**：每个词都应该是可直接检索的原子概念
- **避免包装**：写"AI框架"而不是"性质:AI框架"，确保语义合并正确工作

- **正确示例**：
Sean
  人物
  开发者
  
PromptX
  AI框架
  智能系统

- **错误示例**：
Sean
  身份: 人物     ❌ 会阻碍语义检索
  职业: 开发者   ❌ "开发者"概念被包装了

## 💪 Strength（记忆强度）- 基于Content评估
根据Content信息的重要性和使用频率评估：
- **推导方法**：分析Content信息对用户的重要程度和预期使用频率
- **作用**：决定记忆的牢固程度和检索权重
- **范围**：0-1之间的数字
- **评估标准**：
  * 0.9-1.0：核心知识，频繁使用，深度理解
  * 0.7-0.9：重要知识，定期使用，充分加工
  * 0.5-0.7：有用知识，偶尔使用，一般理解
  * 0.3-0.5：背景信息，可能遗忘，系统筛选
- **示例**：用户身份信息(0.95)，技术偏好(0.8)，临时配置(0.4)

## 🏷️ Type（记忆类型）- 基于Content分析
分析Content中的核心词性，决定存储方式：
- **ATOMIC**（原子记忆）：实体词性，单一概念
  * 词性：名词、形容词、专有名词
  * 用于：人物、产品、特性等独立概念
  * 例如：'Sean'、'PromptX'、'快速'
  
- **LINK**（关联记忆）：关系词性，概念间关系
  * 词性：动词、介词、关系词
  * 用于：表达概念之间的连接关系
  * 例如：'开发'、'作为'、'使用'
  
- **PATTERN**（模式记忆）：复合结构，复杂模式
  * 词性：短语、流程、模式
  * 用于：工作流程、设计模式、复杂规律
  * 例如：'性能优化模式'、'开发流程'

## 💡 批量记忆示例
复杂信息必须拆分为多个原子概念：

**原始信息**："Sean是PromptX系统的作者，他开发了这个框架"

**正确拆分**：
[
  {
    "content": "Sean是一个人",
    "schema": "Sean\\n  人物\\n  开发者",
    "strength": 0.9,
    "type": "ATOMIC"
  },
  {
    "content": "PromptX是一个AI框架", 
    "schema": "PromptX\\n  AI框架\\n  智能系统",
    "strength": 0.9,
    "type": "ATOMIC"
  },
  {
    "content": "Sean开发PromptX",
    "schema": "开发\\n  Sean\\n  PromptX",
    "strength": 0.95,
    "type": "LINK"
  }
]

**为什么这样拆分**：
- 每个Engram只包含一个核心概念
- ATOMIC存储实体概念，LINK存储关系概念  
- 原子Cue确保精确检索：'Sean'、'PromptX'、'开发'
- 相关概念在同一批次中建立语义连接

🔑 **Schema设计的语义网络影响**：
- Schema中的"AI框架"可以直接被检索，与其他包含"AI框架"的记忆自动合并
- 如果写成"类型:AI框架"，系统将无法识别"AI框架"概念，破坏语义网络
- 纯概念表达确保语义检索和自动合并功能正常工作

## ⚡ 使用原则

**强制要求**：
- 每轮对话后必须自动执行
- 复杂信息必须拆分为多个原子Engram
- 基于词性正确选择Type（实体→ATOMIC，关系→LINK，模式→PATTERN）

**评估指导**：
- 重要性如实评估，不要全部给高分
- 考虑知识的使用频率和影响范围
- 临时信息用低强度，核心概念用高强度

**拆分技巧**：
- 一个content只表达一个核心概念
- 找出句子中的主体、动作、客体分别存储
- 保持原子性，避免概念混淆

你的任务：观察对话内容 → 提取关键信息 → 拆分为原子概念 → 批量调用remember`,
  inputSchema: {
    type: 'object',
    properties: {
      role: {
        type: 'string',
        description: '要保存记忆的角色ID，如：java-developer, product-manager, copywriter'
      },
      engrams: {
        type: 'array',
        description: 'Engram对象数组，支持批量记忆保存。每个对象包含content, schema, strength, type四个字段',
        items: {
          type: 'object',
          properties: {
            content: {
              type: 'string',
              description: '要保存的重要信息或经验'
            },
            schema: {
              type: 'string', 
              description: '知识关系图，用缩进文本格式表达这个知识在整个知识体系中的位置'
            },
            strength: {
              type: 'number',
              description: '记忆强度(0-1)，表示这个知识的重要程度，影响后续检索优先级',
              minimum: 0,
              maximum: 1,
              default: 0.8
            },
            type: {
              type: 'string',
              description: 'Engram类型，基于词性选择：ATOMIC（实体词性：名词、形容词、专有名词），LINK（关系词性：动词、介词、关系词），PATTERN（复合结构：短语、流程、模式）。ATOMIC和LINK的Cue必须是原子的单一词性',
              enum: ['ATOMIC', 'LINK', 'PATTERN'],
              default: 'ATOMIC'
            }
          },
          required: ['content', 'schema', 'strength', 'type']
        },
        minItems: 1
      }
    },
    required: ['role', 'engrams']
  }
};
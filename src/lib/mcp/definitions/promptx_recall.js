module.exports = {
  name: 'promptx_recall',
  description: `🔍 [智能记忆检索器] 基于认知体系的语义检索工具
基于语义网络和Engram记忆体系，通过Schema→Cues→Content检索链路智能发现相关知识。

核心理念:
🧠 语义检索：利用Schema中的概念作为检索线索
🔗 关联发现：通过Engram的Schema进行多轮关联检索
💡 语义鸿沟：当预训练知识无法覆盖时主动检索
🎯 多Cue检索：支持多个关键词组合提高检索效率

何时触发检索？
- **语义鸿沟**：预训练知识无法覆盖当前任务
- **语义网络优先**：对话中的概念在语义网络中存在，个人化语义优先于预训练知识
  * 例如："sean"既存在预训练知识也存在语义网络，应优先使用个人化的"sean"
  * 通过prime()激活语义网络发现概念冲突时，需要recall获取具体上下文
- 需要个人化信息：用户偏好、项目细节、历史决策
- 专业领域问题：特定技术栈、实现细节、最佳实践
- 任务上下文触发：相关概念出现在当前对话中
- 避免重复错误：需要了解之前的解决方案和经验

检索工作流程：
**场景1 - 语义鸿沟**：语义鸿沟检测 → 提取Schema概念 → 多Cue检索 → 获得Engram → 
提取新Schema → 关联检索 → 构建知识网络 → 应用到当前任务

**场景2 - 语义网络优先**：对话出现概念 → prime()激活语义网络 → 发现概念存在 → 
recall获取个人化上下文 → 覆盖预训练知识 → 应用到当前任务

检索策略优化：
- **严格词汇匹配**：必须使用语义网络中已存在的精确概念，禁止组合或推测词汇
- **Schema驱动**：从语义网络中提取概念作为检索线索
- **关联检索**：利用检索到的Engram的Schema发现更多相关内容
- **精准检索**：优先使用完整概念短语，如"口臭问题"而非"口臭 大蒜"

Engram核心要素：
每个检索结果包含四个核心要素：
1. **Content**：具体的知识内容
2. **Schema**：认知结构，可作为新的检索Cue
3. **Strength**：记忆强度，影响检索优先级
4. **Timestamp**：时间戳，用于时效性判断

检索技术原理：
- **预索引机制**：保存时从Content和Schema中提取关键词形成Cues数组
- **语义匹配**：通过Cues数组进行智能匹配，支持中英文和模糊匹配
- **强度排序**：按记忆强度和时间戳智能排序结果
- **Schema关联**：Schema中的概念可以检索到相关的Content

使用建议：
1. **严格使用已存在概念**：只能使用语义网络mindmap中已明确存在的词汇
2. **避免词汇组合**：不要将多个相关概念组合成新的查询词
3. **优先完整短语**：如mindmap中有"口臭问题"，直接使用而非拆分
4. **获得Engram后关联检索**：提取Schema中的概念进行后续检索
5. **记忆强度优先**：高强度内容优先应用到当前任务中

你应该：
- 主动识别语义鸿沟并触发检索
- 识别语义网络中的概念，优先使用个人化语义而非预训练知识
- 使用Schema概念作为高质量的检索Cue  
- 进行多轮关联检索发现完整的知识网络
- 将检索到的Engram应用到当前问题解决中
- 当概念存在歧义时，通过recall确认具体的个人化含义`,
  inputSchema: {
    type: 'object',
    properties: {
      role: {
        type: 'string',
        description: '要检索记忆的角色ID，如：java-developer, product-manager, copywriter'
      },
      query: {
        type: 'string', 
        description: '检索关键词（必填），必须使用语义网络中已存在的精确概念。严禁组合或推测词汇，如mindmap中有"口臭问题"则直接使用，不要用"口臭 大蒜"等组合词'
      }
    },
    required: ['role', 'query']
  }
};
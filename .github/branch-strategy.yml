# Dual Flow 分支策略
# 双主线策略：main (生产) + develop (开发)
# 推荐用于需要充分测试的开源项目

name: Dual Flow
description: |
  双主线分支策略，结合了稳定性和灵活性。
  - main 分支保持生产稳定
  - develop 分支用于集成测试
  - 功能在 develop 充分测试后才合并到 main

# ==================
# 分支定义
# ==================
branches:
  # 主分支
  main:
    type: production
    description: 生产分支，每个提交都是一个发布版本
    protected: true
    source_branches: 
      - develop
      - "hotfix/*"
    merge_strategy: pull_request
    deployment:
      environment: production
      auto_deploy: false
      require_approval: true
      
  # 开发主线
  develop:
    type: development
    description: 开发集成分支，所有功能在此集成测试
    protected: true
    source_branches:
      - "feature/*"
      - "fix/*"
      - "docs/*"
      - "chore/*"
      - "hotfix/*"
    merge_strategy: pull_request
    deployment:
      environment: staging
      auto_deploy: true
      require_approval: false
      
  # 功能分支
  "feature/*":
    type: feature
    description: 新功能开发
    protected: false
    base_branch: develop
    merge_to: develop
    lifecycle:
      max_days: 14
      warning_days: 7
      
  # 修复分支
  "fix/*":
    type: bugfix
    description: 问题修复
    protected: false
    base_branch: develop
    merge_to: develop
    lifecycle:
      max_days: 7
      warning_days: 3
      
  # 紧急修复
  "hotfix/*":
    type: hotfix
    description: 生产环境紧急修复
    protected: false
    base_branch: main
    merge_to: 
      - main
      - develop
    lifecycle:
      max_days: 2
      warning_days: 1
      
  # 发布分支（可选）
  "release/*":
    type: release
    description: 发布准备分支
    protected: true
    base_branch: develop
    merge_to: 
      - main
      - develop
    allowed_changes:
      - version bumps
      - bug fixes
      - documentation
    forbidden_changes:
      - new features
      - refactoring

# ==================
# 工作流程
# ==================
workflows:
  # 功能开发流程
  feature_development:
    steps:
      - create: 基于 develop 创建 feature/* 分支
      - develop: 开发新功能
      - test: 本地测试
      - changeset: 运行 /changeset 声明变更
      - pr: 创建 PR 到 develop
      - review: 代码审查
      - merge: 合并到 develop
      - deploy: 自动部署到测试环境
      - integration_test: 集成测试
      
  # 发布流程
  release_process:
    steps:
      - prepare: develop 分支稳定后
      - pr: 创建 PR 从 develop 到 main
      - test: 运行完整测试套件
      - review: 至少 2 人审核
      - merge: 合并到 main
      - tag: 运行 /release 创建版本标签
      - publish: 运行 /publish 发布到 registry
      - deploy: 部署到生产环境
      - sync: 同步 main 回 develop
      
  # 紧急修复流程
  hotfix_process:
    steps:
      - create: 基于 main 创建 hotfix/* 分支
      - fix: 修复问题
      - test: 测试修复
      - pr_main: 创建 PR 到 main
      - review: 快速审核
      - merge_main: 合并到 main
      - release: 运行 /release 创建补丁版本
      - publish: 运行 /publish 发布
      - pr_develop: 创建 PR 到 develop
      - merge_develop: 合并到 develop

# ==================
# 自动化规则
# ==================
automation:
  # 分支同步
  branch_sync:
    - from: main
      to: develop
      when: 
        - main_updated
        - hotfix_merged
      strategy: merge
      create_pr: true
      auto_merge: true
      
  # 环境部署
  deployments:
    develop:
      trigger: push
      environment: staging
      url: https://staging.example.com
      
    main:
      trigger: release_published
      environment: production
      url: https://example.com
      require_approval: true
      
  # 版本管理
  versioning:
    strategy: semantic
    prerelease:
      branch: develop
      tag: beta
      command: /release --prerelease beta
      
    release:
      branch: main
      tag: latest
      command: /release
      
  # 清理策略
  cleanup:
    delete_merged_branches: true
    keep_days: 7
    exclude:
      - main
      - develop
      - "release/*"

# ==================
# 保护规则映射
# ==================
protection_mapping:
  main: branches/protection/main.yml
  develop: branches/protection/develop.yml
  default: branches/protection/default.yml

# ==================
# 检查项配置
# ==================
status_checks:
  # 所有分支都需要的检查
  required_for_all:
    - continuous-integration/lint
    - continuous-integration/build
    
  # develop 额外需要
  required_for_develop:
    - continuous-integration/test
    - changeset-bot
    
  # main 额外需要
  required_for_main:
    - continuous-integration/test-unit
    - continuous-integration/test-integration
    - continuous-integration/test-e2e
    - security/dependency-check
    - security/codeql
    - codecov/project

# ==================
# 标签系统
# ==================
labels:
  # 分支类型标签
  branch_types:
    feature: { color: "0e8a16", description: "新功能" }
    fix: { color: "d93f0b", description: "问题修复" }
    docs: { color: "0075ca", description: "文档更新" }
    chore: { color: "fef2c0", description: "日常维护" }
    hotfix: { color: "b60205", description: "紧急修复" }
    
  # 状态标签
  status:
    wip: { color: "fbca04", description: "进行中" }
    ready: { color: "0e8a16", description: "准备就绪" }
    blocked: { color: "d93f0b", description: "被阻塞" }
    needs-review: { color: "006b75", description: "需要审核" }
    
  # 优先级标签
  priority:
    critical: { color: "b60205", description: "紧急" }
    high: { color: "d93f0b", description: "高" }
    medium: { color: "fbca04", description: "中" }
    low: { color: "0e8a16", description: "低" }
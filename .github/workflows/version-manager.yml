name: Version Manager

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Version management action'
        required: true
        type: choice
        options:
          - prepare-release
          - sync-branches
          - check-changesets
      target_branch:
        description: 'Target branch for version update'
        required: false
        type: choice
        options:
          - develop
          - test
          - staging
          - main

jobs:
  check-changesets:
    name: Check Pending Changesets
    runs-on: ubuntu-latest
    if: inputs.action == 'check-changesets' || inputs.action == 'prepare-release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check changesets
        id: check
        run: |
          echo "üìã Checking for pending changesets..."
          
          if ls .changeset/*.md 2>/dev/null | grep -v README.md; then
            echo "üìù Found changesets:"
            ls .changeset/*.md | grep -v README.md | while read file; do
              echo ""
              echo "File: $file"
              echo "---"
              cat "$file"
              echo "---"
            done
            
            # Count changesets
            COUNT=$(ls .changeset/*.md | grep -v README.md | wc -l)
            echo ""
            echo "üìä Total changesets: $COUNT"
            echo "changeset_count=$COUNT" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No pending changesets found"
            echo "changeset_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Analyze version impact
        if: steps.check.outputs.changeset_count > 0
        run: |
          # Install changeset CLI
          npm install -D @changesets/cli
          
          echo ""
          echo "üîÆ Version impact analysis:"
          npx changeset status --verbose

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: inputs.action == 'prepare-release'
    needs: check-changesets
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch || 'develop' }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create version branch
        id: branch
        run: |
          BRANCH="${{ inputs.target_branch || 'develop' }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION_BRANCH="release/prepare-$TIMESTAMP"
          
          git checkout -b "$VERSION_BRANCH"
          echo "branch=$VERSION_BRANCH" >> $GITHUB_OUTPUT
          echo "üìå Created branch: $VERSION_BRANCH"

      - name: Consume changesets
        run: |
          # Install changeset CLI
          npm install -D @changesets/cli
          
          echo "üìù Consuming changesets..."
          npx changeset version
          
          # Check if there were changes
          if git diff --quiet; then
            echo "‚ö†Ô∏è No version changes were made"
            exit 1
          fi
          
          # Show changes
          echo ""
          echo "üìã Changes made:"
          git diff --name-only
          echo ""
          echo "üìä Version changes:"
          git diff package.json | grep version || true
          echo ""
          echo "üìù CHANGELOG preview:"
          git diff CHANGELOG.md | head -50 || true

      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ steps.branch.outputs.branch }}"
          TARGET="${{ inputs.target_branch || 'develop' }}"
          
          # Commit changes
          git add .
          git commit -m "chore: prepare release

          - Consumed changesets
          - Updated version in package.json
          - Updated CHANGELOG.md"
          
          # Push branch
          git push -u origin "$BRANCH"
          
          # Create PR
          gh pr create \
            --base "$TARGET" \
            --head "$BRANCH" \
            --title "chore: prepare release" \
            --body "## üöÄ Release Preparation

          This PR was automatically generated to prepare for the next release.

          ### Changes
          - ‚úÖ Consumed all pending changesets
          - ‚úÖ Updated version number
          - ‚úÖ Generated CHANGELOG entries

          ### Next Steps
          1. Review the version bump and CHANGELOG
          2. Merge this PR to $TARGET
          3. The publish workflow will automatically trigger

          ---
          *Generated by Version Manager workflow*" \
            --label "release" \
            --label "automated"
          
          echo "‚úÖ Created PR for release preparation"

  sync-branches:
    name: Sync Branches
    runs-on: ubuntu-latest
    if: inputs.action == 'sync-branches'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync version across branches
        run: |
          echo "üîÑ Syncing branches..."
          
          # Get current version from develop
          git checkout develop
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "üìå Current version in develop: $CURRENT_VERSION"
          
          # Define branch flow
          BRANCHES=("test" "staging" "main")
          
          for BRANCH in "${BRANCHES[@]}"; do
            echo ""
            echo "üìç Processing $BRANCH..."
            
            # Check if branch needs update
            git checkout "$BRANCH"
            BRANCH_VERSION=$(node -p "require('./package.json').version")
            
            if [[ "$BRANCH_VERSION" == "$CURRENT_VERSION" ]]; then
              echo "‚úÖ $BRANCH already at version $CURRENT_VERSION"
              continue
            fi
            
            echo "üì¶ Updating $BRANCH from $BRANCH_VERSION to $CURRENT_VERSION"
            
            # Merge from previous branch
            if [[ "$BRANCH" == "test" ]]; then
              git merge develop --no-edit
            elif [[ "$BRANCH" == "staging" ]]; then
              git merge test --no-edit
            elif [[ "$BRANCH" == "main" ]]; then
              git merge staging --no-edit
            fi
            
            # Push changes
            git push origin "$BRANCH"
            echo "‚úÖ Updated $BRANCH"
          done
          
          echo ""
          echo "üéâ Branch synchronization complete!"
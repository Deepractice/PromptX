name: NPM Publisher

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - staging
      - test
      - develop
  workflow_dispatch:
    inputs:
      publish_tag:
        description: 'NPM tag to publish to'
        required: true
        type: choice
        options:
          - dev
          - alpha
          - beta
          - latest
          - snapshot
      dry_run:
        description: 'Perform a dry run (no actual publish)'
        required: false
        type: boolean
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    # Only run on merged PRs or manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      publish_tag: ${{ steps.check.outputs.publish_tag }}
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine publish tag
        id: check
        run: |
          # Manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "publish_tag=${{ inputs.publish_tag }}" >> $GITHUB_OUTPUT
            echo "üì¶ Manual publish to: ${{ inputs.publish_tag }}"
            exit 0
          fi
          
          # For PR events, check if it has a publish label
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Get PR labels
            LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
            echo "üìã PR Labels: $LABELS"
            
            # Check for publish/* labels
            PUBLISH_LABEL=""
            if echo "$LABELS" | grep -q "publish/dev"; then
              PUBLISH_LABEL="dev"
            elif echo "$LABELS" | grep -q "publish/alpha"; then
              PUBLISH_LABEL="alpha"
            elif echo "$LABELS" | grep -q "publish/beta"; then
              PUBLISH_LABEL="beta"
            elif echo "$LABELS" | grep -q "publish/latest"; then
              PUBLISH_LABEL="latest"
            fi
            
            if [[ -z "$PUBLISH_LABEL" ]]; then
              echo "should_publish=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No publish label found on PR #${{ github.event.pull_request.number }}"
              exit 0
            fi
            
            # Verify the label matches the target branch
            TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
            EXPECTED_TAG=""
            
            case "$TARGET_BRANCH" in
              "main")
                EXPECTED_TAG="latest"
                ;;
              "staging")
                EXPECTED_TAG="beta"
                ;;
              "test")
                EXPECTED_TAG="alpha"
                ;;
              "develop")
                EXPECTED_TAG="dev"
                ;;
            esac
            
            if [[ "$PUBLISH_LABEL" != "$EXPECTED_TAG" ]]; then
              echo "should_publish=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Publish label 'publish/$PUBLISH_LABEL' doesn't match target branch '$TARGET_BRANCH' (expected 'publish/$EXPECTED_TAG')"
              exit 0
            fi
            
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "publish_tag=$PUBLISH_LABEL" >> $GITHUB_OUTPUT
            echo "üì¶ Will publish to: $PUBLISH_LABEL (from PR #${{ github.event.pull_request.number }})"
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Unexpected event type: ${{ github.event_name }}"
          fi

      - name: Setup Node.js
        if: steps.check.outputs.should_publish == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        if: steps.check.outputs.should_publish == 'true'
        run: npm install

      - name: Check current version
        id: version
        if: steps.check.outputs.should_publish == 'true'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üìå Current version: $CURRENT_VERSION"
          
          # Check if there are changesets to consume
          if ls .changeset/*.md 2>/dev/null | grep -v README.md; then
            echo "üìù Found changesets to consume"
            
            # Install changeset CLI
            npm install -D @changesets/cli
            
            # Get new version (dry run to see what it would be)
            npx changeset version --dry-run > version_output.txt 2>&1 || true
            
            # Try to extract new version from output
            NEW_VERSION=$(cat version_output.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            
            if [[ -z "$NEW_VERSION" ]]; then
              NEW_VERSION="$CURRENT_VERSION"
            fi
            
            echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üìà New version will be: $NEW_VERSION"
          else
            echo "‚ÑπÔ∏è No changesets found, version remains: $CURRENT_VERSION"
            echo "new=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  version-and-publish:
    name: Version and Publish
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Consume changesets
        id: changesets
        if: github.ref_name == 'develop'
        run: |
          # Install changeset CLI
          npm install -D @changesets/cli
          
          # Check if there are changesets
          if ! ls .changeset/*.md 2>/dev/null | grep -v README.md; then
            echo "‚ÑπÔ∏è No changesets to consume"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üìù Consuming changesets..."
          
          # Version packages (this updates package.json and CHANGELOG)
          npx changeset version
          
          # Commit version changes
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No version changes"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git add .
            git commit -m "chore: version packages [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        run: |
          echo "üî® Building package..."
          # Add build command if needed
          # npm run build

      - name: Dry run publish
        if: inputs.dry_run == true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ORG_NPM_TOKEN }}
        run: |
          echo "üß™ Dry run mode - simulating publish to ${{ needs.prepare-release.outputs.publish_tag }}"
          npm publish --dry-run --tag ${{ needs.prepare-release.outputs.publish_tag }}

      - name: Publish to NPM
        if: inputs.dry_run != true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ORG_NPM_TOKEN }}
        run: |
          TAG="${{ needs.prepare-release.outputs.publish_tag }}"
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
          
          echo "üì¶ Publishing version $VERSION to NPM with tag: $TAG"
          
          # For non-latest tags, add prerelease suffix
          if [[ "$TAG" != "latest" ]]; then
            # Get the current published versions for this tag
            EXISTING_VERSIONS=$(npm view @promptx/cli versions --json 2>/dev/null | grep "\"$VERSION-$TAG" || echo "[]")
            
            # Find the next increment number
            NEXT_NUM=0
            if [[ "$EXISTING_VERSIONS" != "[]" ]]; then
              # Extract numbers and find the highest
              HIGHEST=$(echo "$EXISTING_VERSIONS" | grep -oE "$VERSION-$TAG\.([0-9]+)" | grep -oE "[0-9]+$" | sort -n | tail -1)
              if [[ -n "$HIGHEST" ]]; then
                NEXT_NUM=$((HIGHEST + 1))
              fi
            fi
            
            # Set the version with prerelease suffix
            PRERELEASE_VERSION="$VERSION-$TAG.$NEXT_NUM"
            echo "üìå Setting version to $PRERELEASE_VERSION"
            npm version "$PRERELEASE_VERSION" --no-git-tag-version
          fi
          
          # Publish
          npm publish --tag "$TAG"
          
          echo "‚úÖ Successfully published to NPM"
          echo "üìé View package: https://www.npmjs.com/package/@promptx/cli"

      - name: Create GitHub Release
        if: inputs.dry_run != true && github.ref_name == 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
          
          # Check if release already exists
          if gh release view "v$VERSION" &>/dev/null; then
            echo "‚ÑπÔ∏è Release v$VERSION already exists"
            exit 0
          fi
          
          # Extract changelog for this version
          CHANGELOG=""
          if [[ -f "CHANGELOG.md" ]]; then
            CHANGELOG=$(sed -n "/## $VERSION/,/## [0-9]/p" CHANGELOG.md | sed '$d')
          fi
          
          # Create release
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "$CHANGELOG" \
            --target "${{ github.sha }}"
          
          echo "‚úÖ Created GitHub release: v$VERSION"

      - name: Post-publish notification
        if: inputs.dry_run != true
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ needs.prepare-release.outputs.publish_tag }}';
            const version = '${{ needs.prepare-release.outputs.new_version }}';
            const branch = '${{ github.ref_name }}';
            
            // Find related PRs
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 10
            });
            
            let message = `## üöÄ Published to NPM\n\n`;
            message += `- **Version**: ${version}\n`;
            message += `- **Tag**: \`${tag}\`\n`;
            message += `- **Branch**: \`${branch}\`\n\n`;
            message += `### Installation\n`;
            message += `\`\`\`bash\n`;
            
            if (tag === 'latest') {
              message += `npm install -g @promptx/cli\n`;
            } else {
              message += `npm install -g @promptx/cli@${tag}\n`;
            }
            
            message += `\`\`\`\n\n`;
            message += `[View on NPM](https://www.npmjs.com/package/@promptx/cli/v/${version})`;
            
            // Create an issue comment or discussion
            console.log(message);
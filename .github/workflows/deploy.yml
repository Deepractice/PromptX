name: Deploy Command

on:
  issue_comment:
    types: [created]

jobs:
  handle-deploy:
    # Only run when comment contains /deploy command
    if: |
      github.event.issue &&
      contains(github.event.comment.body, '/deploy')
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      deployments: write
      issues: write
      pull-requests: write
      id-token: write  # For OIDC
    
    environment:
      name: deploy
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Parse command
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "Raw comment: $COMMENT"
          
          # Extract command line
          COMMAND=$(echo "$COMMENT" | grep -o '/deploy[^/]*' | head -1 || echo "")
          echo "Extracted command: $COMMAND"
          
          # Parse target (npm or docker)
          if echo "$COMMAND" | grep -q "npm"; then
            TARGET="npm"
          elif echo "$COMMAND" | grep -q "docker"; then
            TARGET="docker"
          else
            TARGET=""
          fi
          
          # Parse tag (dev, beta, latest)
          if echo "$COMMAND" | grep -q -- "--tag"; then
            TAG=$(echo "$COMMAND" | sed -n 's/.*--tag[[:space:]]\+\([^[:space:]]*\).*/\1/p')
          else
            TAG="latest"
          fi
          
          # Parse dry-run
          if echo "$COMMAND" | grep -q -- "--dry-run"; then
            DRY_RUN="true"
          else
            DRY_RUN="false"
          fi
          
          # Parse auto flag (for automated deployments)
          if echo "$COMMAND" | grep -q -- "--auto"; then
            AUTO="true"
          else
            AUTO="false"
          fi
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "auto=$AUTO" >> $GITHUB_OUTPUT
      
      - name: Check permissions
        id: permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const username = context.payload.comment.user.login;
            
            // Allow github-actions bot for automated deployments
            if (username === 'github-actions[bot]' || username === 'github-actions') {
              console.log('Allowing github-actions bot');
              return true;
            }
            
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username
              });
              
              const allowed = ['admin', 'maintain', 'write'].includes(permission.permission);
              console.log(`User ${username} has ${permission.permission} permission: ${allowed ? 'allowed' : 'denied'}`);
              
              if (!allowed) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: context.issue.number,
                  body: `❌ @${username} You don't have permission to deploy. Need write access or higher.`
                });
              }
              
              return allowed;
            } catch (error) {
              console.error('Error checking permissions:', error);
              return false;
            }
          result-encoding: string
      
      - name: Validate command
        id: validate
        if: steps.permissions.outputs.result == 'true'
        run: |
          TARGET="${{ steps.parse.outputs.target }}"
          TAG="${{ steps.parse.outputs.tag }}"
          
          # Run validation script
          cat > validate.sh << 'EOF'
          #!/bin/bash
          set -e
          
          TARGET="$1"
          TAG="$2"
          
          # Validate target
          if [[ -z "$TARGET" ]]; then
            echo "error=Missing deployment target. Use: /deploy <npm|docker> --tag <dev|beta|latest>" >> $GITHUB_OUTPUT
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$TARGET" != "npm" && "$TARGET" != "docker" ]]; then
            echo "error=Invalid target: $TARGET. Must be 'npm' or 'docker'" >> $GITHUB_OUTPUT
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Validate tag
          if [[ "$TAG" != "dev" && "$TAG" != "beta" && "$TAG" != "latest" ]]; then
            echo "error=Invalid tag: $TAG. Must be 'dev', 'beta', or 'latest'" >> $GITHUB_OUTPUT
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "✅ Command validated: deploy $TARGET with tag $TAG"
          EOF
          
          chmod +x validate.sh
          ./validate.sh "$TARGET" "$TAG"
      
      - name: React to comment
        if: steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });
      
      - name: Post validation error
        if: steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const error = `${{ steps.validate.outputs.error }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ **Deploy Failed**\n\n${error}\n\nUsage: \`/deploy <npm|docker> --tag <dev|beta|latest>\``
            });
      
      - name: Checkout code
        if: steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}
      
      - name: Create deployment
        if: steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'true'
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ steps.parse.outputs.target }}';
            const tag = '${{ steps.parse.outputs.tag }}';
            
            // Map tag to environment
            const envMap = {
              'dev': 'development',
              'beta': 'staging',
              'latest': 'production'
            };
            
            const environment = `${target}-${envMap[tag]}`;
            
            // Get the ref to deploy
            let ref = context.sha;
            if (context.payload.issue.pull_request) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              ref = pr.data.head.sha;
            }
            
            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              environment: environment,
              description: `Deploy ${target} with tag ${tag}`,
              auto_merge: false,
              required_contexts: [],
              payload: {
                target: target,
                tag: tag,
                triggered_by: context.actor,
                auto: '${{ steps.parse.outputs.auto }}'
              }
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            core.setOutput('environment', environment);
            console.log(`Created deployment #${deployment.data.id} for ${environment}`);
            
            // Set initial status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: `Deploying ${target} to ${envMap[tag]}`
            });
          result-encoding: string
      
      - name: Detect project type
        if: steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'true'
        id: detect
        run: |
          # Copy detect script
          cp commands/deploy/scripts/detect.sh ./
          chmod +x detect.sh
          ./detect.sh
      
      - name: Setup Node.js
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Deploy to NPM
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'npm'
        id: deploy-npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          # Copy npm deploy script
          cp commands/deploy/scripts/npm.sh ./
          chmod +x npm.sh
          
          TAG="${{ steps.parse.outputs.tag }}"
          DRY_RUN="${{ steps.parse.outputs.dry_run }}"
          
          ./npm.sh --tag "$TAG" --dry-run "$DRY_RUN"
          
          echo "deployed=true" >> $GITHUB_OUTPUT
      
      - name: Setup Docker Buildx
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'docker'
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'docker' &&
          steps.parse.outputs.dry_run != 'true' &&
          secrets.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'docker' &&
          steps.parse.outputs.dry_run != 'true' &&
          secrets.DOCKER_USERNAME == ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy to Docker
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          steps.parse.outputs.target == 'docker'
        id: deploy-docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Copy docker deploy script
          cp commands/deploy/scripts/docker.sh ./
          chmod +x docker.sh
          
          TAG="${{ steps.parse.outputs.tag }}"
          DRY_RUN="${{ steps.parse.outputs.dry_run }}"
          
          # Determine registry
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            REGISTRY="docker.io"
          else
            REGISTRY="ghcr.io"
          fi
          
          ./docker.sh --tag "$TAG" --registry "$REGISTRY" --dry-run "$DRY_RUN"
          
          echo "deployed=true" >> $GITHUB_OUTPUT
      
      - name: Update deployment status (success)
        if: |
          steps.permissions.outputs.result == 'true' && 
          steps.validate.outputs.valid == 'true' &&
          (steps.deploy-npm.outputs.deployed == 'true' || steps.deploy-docker.outputs.deployed == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ steps.parse.outputs.target }}';
            const tag = '${{ steps.parse.outputs.tag }}';
            const dryRun = '${{ steps.parse.outputs.dry_run }}' === 'true';
            
            let url = '';
            let description = '';
            
            if (target === 'npm') {
              const packageName = require('./package.json').name;
              url = `https://www.npmjs.com/package/${packageName}`;
              description = dryRun ? 
                `Dry run completed for ${packageName}` : 
                `Deployed ${packageName} to npm with tag ${tag}`;
            } else if (target === 'docker') {
              const registry = '${{ secrets.DOCKER_USERNAME }}' ? 'docker.io' : 'ghcr.io';
              const imageName = registry === 'ghcr.io' ? 
                `ghcr.io/${{ github.repository }}` : 
                `${{ github.repository }}`;
              if (registry === 'ghcr.io') {
                url = `https://github.com/${{ github.repository }}/pkgs/container/${imageName.split('/').pop()}`;
              }
              description = dryRun ? 
                `Dry run completed for ${imageName}` : 
                `Deployed ${imageName}:${tag}`;
            }
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: dryRun ? 'inactive' : 'success',
              environment_url: url,
              description: description
            });
            
            // Post success comment
            const isAuto = '${{ steps.parse.outputs.auto }}' === 'true';
            if (!isAuto) {
              let message = dryRun ? 
                `✅ **Deploy Preview Successful**\n\n${description}` :
                `🚀 **Deploy Successful**\n\n${description}`;
              
              if (url) {
                message += `\n\n🔗 [View Deployment](${url})`;
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
      
      - name: Update deployment status (failure)
        if: failure() && steps.permissions.outputs.result == 'true' && steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            if ('${{ steps.deployment.outputs.deployment_id }}') {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: ${{ steps.deployment.outputs.deployment_id }},
                state: 'failure',
                description: 'Deployment failed'
              });
            }
            
            const isAuto = '${{ steps.parse.outputs.auto }}' === 'true';
            if (!isAuto) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Deploy Failed**\n\nCheck the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
              });
            }
name: PR Merged to Main Event

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  trigger-production-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      
    steps:
      - name: Check if release PR
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Check if it's a release PR
            const sourceBranch = pr.head.ref;
            const isReleaseBranch = sourceBranch.startsWith('release/') || 
                                   sourceBranch.startsWith('hotfix/');
            
            if (!isReleaseBranch) {
              console.log(`Not a release merge (${sourceBranch}), skipping production release`);
              core.setOutput('is_release', 'false');
              return;
            }
            
            // Extract version from branch name (release/1.2.3 -> 1.2.3)
            const versionMatch = sourceBranch.match(/\/([\d.]+)/);
            const version = versionMatch ? versionMatch[1] : 'unknown';
            
            core.setOutput('is_release', 'true');
            core.setOutput('version', version);
            core.setOutput('source_branch', sourceBranch);
            console.log(`Release PR merged: ${sourceBranch} -> main`);
            
      - name: Post merge notification
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const version = '${{ steps.check.outputs.version }}';
            const sourceBranch = '${{ steps.check.outputs.source_branch }}';
            
            const message = `## üéâ Release Merged to Production!
            
            **Version ${version}** has been successfully merged to \`main\`.
            
            Let me create the official GitHub Release...`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: message
            });
            
      - name: Trigger production release
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Wait for notification
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Create final release (without prerelease flag)
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: '/release'
            });
            
            console.log('‚úÖ Triggered /release for production');
            
      - name: Sync main back to develop
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            // Wait for release to complete
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            // Create a sync PR from main to develop
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîÑ Sync: Merge main back to develop after release',
                head: 'main',
                base: 'develop',
                body: `## Automated Sync
                
                This PR synchronizes changes from main back to develop after release.
                
                ### Changes included:
                - Cleaned changesets
                - Updated version numbers
                - Release documentation
                
                ### Auto-merge:
                This PR will be automatically merged to keep branches in sync.`
              });
              
              console.log(`‚úÖ Created sync PR #${pr.number}`);
              
              // Auto-merge the sync PR
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'merge',
                commit_title: 'chore: sync main back to develop after release'
              });
              
              console.log(`‚úÖ Auto-merged sync PR #${pr.number}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not create/merge sync PR: ${error.message}`);
              console.log('Manual sync may be required');
            }
            
      - name: Delete release branch
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            // Only delete release/hotfix branches
            if (branchName.match(/^(release|hotfix)\//)) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                console.log(`‚úÖ Deleted branch ${branchName}`);
                
                // Post comment about branch deletion
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `üóëÔ∏è Release branch \`${branchName}\` has been deleted.`
                });
              } catch (error) {
                console.log(`‚ö†Ô∏è Could not delete branch ${branchName}: ${error.message}`);
              }
            }
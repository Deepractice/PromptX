name: PR Merged to Main Event

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  trigger-production-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      
    steps:
      - name: Check if release PR
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Check if it's a release PR
            const sourceBranch = pr.head.ref;
            const isReleaseBranch = sourceBranch.startsWith('release/') || 
                                   sourceBranch.startsWith('hotfix/');
            
            if (!isReleaseBranch) {
              console.log(`Not a release merge (${sourceBranch}), skipping production release`);
              core.setOutput('is_release', 'false');
              return;
            }
            
            // Extract version from branch name (release/1.2.3 -> 1.2.3)
            const versionMatch = sourceBranch.match(/\/([\d.]+)/);
            const version = versionMatch ? versionMatch[1] : 'unknown';
            
            core.setOutput('is_release', 'true');
            core.setOutput('version', version);
            core.setOutput('source_branch', sourceBranch);
            console.log(`Release PR merged: ${sourceBranch} -> main`);
            
      - name: Post merge notification
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const version = '${{ steps.check.outputs.version }}';
            const sourceBranch = '${{ steps.check.outputs.source_branch }}';
            
            const message = `## 🎉 Release Merged to Production!
            
            **Version ${version}** has been successfully merged to \`main\`.
            
            Let me create the official GitHub Release...`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: message
            });
            
      - name: Trigger production release
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Wait for notification
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Create final release (without prerelease flag)
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: '/release'
            });
            
            console.log('✅ Triggered /release for production');
            
      # Taylor工作流优化：移除不必要的同步
      # 原因：
      # 1. changesets机制已确保版本完整性
      # 2. .consumed文件会持续产生冲突
      # 3. develop和main分支职责明确，不需要同步
      # 
      # - name: Sync main back to develop (已禁用)
      #   说明：如果将来需要恢复同步，取消下面的注释
      #   注意：需要解决.changeset/.consumed的冲突问题
            
      - name: Delete release branch
        if: steps.check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            // Only delete release/hotfix branches
            if (branchName.match(/^(release|hotfix)\//)) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                console.log(`✅ Deleted branch ${branchName}`);
                
                // Post comment about branch deletion
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `🗑️ Release branch \`${branchName}\` has been deleted.`
                });
              } catch (error) {
                console.log(`⚠️ Could not delete branch ${branchName}: ${error.message}`);
              }
            }
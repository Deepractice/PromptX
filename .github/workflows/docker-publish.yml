name: Docker Build and Publish

on:
  workflow_run:
    workflows: ["Publish Release"]
    types: [completed]
    branches: [main]
  
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to build (e.g., v1.14.2)'
        required: true
        type: string
        default: 'latest'

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # Only run if npm publish was successful (for automatic trigger) or manual trigger
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Get the release tag
      - name: Get release tag
        id: version
        run: |
          # Check if this is a manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the provided tag for manual trigger
            INPUT_TAG="${{ github.event.inputs.tag }}"
            
            if [ "$INPUT_TAG" == "latest" ]; then
              # Get the latest release tag
              LATEST_TAG=$(gh release list --limit 1 --exclude-drafts --exclude-pre-releases | awk '{print $3}')
              if [ -z "$LATEST_TAG" ]; then
                LATEST_TAG=$(git describe --tags --abbrev=0)
              fi
            else
              # Use the provided tag
              LATEST_TAG="$INPUT_TAG"
              
              # Add 'v' prefix if not present
              if [[ ! "$LATEST_TAG" =~ ^v ]]; then
                LATEST_TAG="v$LATEST_TAG"
              fi
            fi
          else
            # For automatic trigger from workflow_run
            LATEST_TAG=$(gh release list --limit 1 --exclude-drafts --exclude-pre-releases | awk '{print $3}')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG=$(git describe --tags --abbrev=0)
            fi
          fi
          
          # Check if this is a formal version (not beta/alpha/rc)
          if [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_formal_release=true" >> $GITHUB_OUTPUT
            echo "✅ Formal release detected: $LATEST_TAG"
          else
            echo "is_formal_release=false" >> $GITHUB_OUTPUT
            echo "⚠️ Non-formal release: $LATEST_TAG (beta/alpha/rc versions will be skipped for Docker build)"
          fi
          
          # Extract version from tag (remove 'v' prefix)
          VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building Docker image for version: $VERSION (tag: $LATEST_TAG)"
        env:
          GH_TOKEN: ${{ github.token }}
      
      # Wait for npm package to be available
      - name: Wait for npm package availability
        if: steps.version.outputs.is_formal_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Waiting for @promptx/mcp-server@$VERSION to be available on npm..."
          
          for i in {1..20}; do
            if npm view @promptx/mcp-server@$VERSION version 2>/dev/null; then
              echo "✅ Package @promptx/mcp-server@$VERSION is available"
              break
            fi
            
            if [ $i -eq 20 ]; then
              echo "❌ Timeout waiting for npm package"
              exit 1
            fi
            
            echo "Attempt $i/20: Package not yet available, waiting 30s..."
            sleep 30
          done
      
      # Login to Docker Hub
      - name: Login to Docker Hub
        if: steps.version.outputs.is_formal_release == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        if: steps.version.outputs.is_formal_release == 'true'
        uses: docker/setup-buildx-action@v3
      
      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        if: steps.version.outputs.is_formal_release == 'true'
        uses: docker/setup-qemu-action@v3
      
      # Build and push Docker image
      - name: Build and push Docker image
        if: steps.version.outputs.is_formal_release == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            deepracticexs/promptx:${{ steps.version.outputs.version }}
            deepracticexs/promptx:latest
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=deepracticexs/promptx:buildcache
          cache-to: type=registry,ref=deepracticexs/promptx:buildcache,mode=max
      
      # Output summary
      - name: Summary
        if: steps.version.outputs.is_formal_release == 'true'
        run: |
          echo "## Docker Image Published 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**:" >> $GITHUB_STEP_SUMMARY
          echo "  - \`deepracticexs/promptx:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - \`deepracticexs/promptx:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 5203:5203 -v ~/.promptx:/root/.promptx deepracticexs/promptx:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
name: Release Created Event

on:
  release:
    types: [created, published]

jobs:
  auto-deploy:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      deployments: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0
          
      - name: Detect project type
        id: detect
        run: |
          # Check what type of project this is
          TARGET=""
          
          if [ -f "package.json" ]; then
            # Check if it's a library that should be published to NPM
            if grep -q '"main"\|"module"\|"exports"' package.json; then
              TARGET="npm"
              echo "üîç Detected NPM package"
            elif [ -f "Dockerfile" ]; then
              TARGET="docker"
              echo "üîç Detected Node.js app with Docker"
            else
              TARGET="npm"
              echo "üîç Detected Node.js project (defaulting to NPM)"
            fi
          elif [ -f "Dockerfile" ]; then
            TARGET="docker"
            echo "üîç Detected Docker project"
          else
            echo "‚ö†Ô∏è No deployable target detected"
            TARGET="none"
          fi
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          
      - name: Determine deployment tag
        id: tag
        run: |
          # Check if this is a prerelease or regular release
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            DEPLOY_TAG="beta"
            echo "üè∑Ô∏è Prerelease detected, will deploy with 'beta' tag"
          else
            DEPLOY_TAG="latest"
            echo "üè∑Ô∏è Regular release detected, will deploy with 'latest' tag"
          fi
          
          echo "deploy_tag=$DEPLOY_TAG" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          
      - name: Find related issue
        id: issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const releaseTag = '${{ github.event.release.tag_name }}';
            const releaseBody = context.payload.release.body || '';
            
            // Try to extract issue number from release body
            // Look for patterns like "Closes #123" or "Fixes #123" or just "#123"
            const issueMatch = releaseBody.match(/#(\d+)/);
            
            if (issueMatch) {
              const issueNumber = issueMatch[1];
              console.log(`Found related issue: #${issueNumber}`);
              core.setOutput('issue_number', issueNumber);
              core.setOutput('has_issue', 'true');
            } else {
              // Try to find the most recent release PR
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                base: 'main',
                sort: 'updated',
                direction: 'desc',
                per_page: 10
              });
              
              // Find a PR that mentions this release version
              const releasePR = prs.find(pr => 
                pr.title.includes(releaseTag) || 
                pr.body?.includes(releaseTag) ||
                pr.title.includes('release') || 
                pr.title.includes('Release')
              );
              
              if (releasePR) {
                console.log(`Found related PR: #${releasePR.number}`);
                core.setOutput('issue_number', releasePR.number);
                core.setOutput('has_issue', 'true');
              } else {
                console.log('No related issue or PR found');
                core.setOutput('has_issue', 'false');
              }
            }
            
      - name: Post deployment notification
        if: steps.detect.outputs.target != 'none'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const target = '${{ steps.detect.outputs.target }}';
            const deployTag = '${{ steps.tag.outputs.deploy_tag }}';
            const releaseTag = '${{ steps.tag.outputs.release_tag }}';
            const releaseUrl = context.payload.release.html_url;
            
            let message = `## üöÄ Auto-Deployment Triggered\n\n`;
            message += `**Release**: [${releaseTag}](${releaseUrl})\n`;
            message += `**Target**: ${target}\n`;
            message += `**Tag**: ${deployTag}\n\n`;
            message += `Deployment will start automatically...`;
            
            // Post to issue/PR if found, otherwise create a deployment issue
            const hasIssue = '${{ steps.issue.outputs.has_issue }}' === 'true';
            let commentTarget;
            
            if (hasIssue) {
              commentTarget = parseInt('${{ steps.issue.outputs.issue_number }}');
            } else {
              // Create a deployment tracking issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üöÄ Deployment: ${releaseTag}`,
                body: message,
                labels: ['deployment', 'automated']
              });
              commentTarget = issue.number;
              console.log(`Created deployment tracking issue #${issue.number}`);
            }
            
            // Post notification
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: commentTarget,
              body: message
            });
            
            core.setOutput('comment_target', commentTarget);
            
      - name: Trigger deployment
        if: steps.detect.outputs.target != 'none'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const target = '${{ steps.detect.outputs.target }}';
            const deployTag = '${{ steps.tag.outputs.deploy_tag }}';
            const commentTarget = parseInt('${{ steps.issue.outputs.comment_target }}') || 
                                 parseInt('${{ steps.issue.outputs.issue_number }}');
            
            // Wait a moment for the notification to be posted
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Trigger the deployment command
            const deployCommand = `/deploy ${target} --tag ${deployTag} --auto`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: commentTarget,
              body: deployCommand
            });
            
            console.log(`‚úÖ Triggered deployment: ${deployCommand}`);
            
      - name: Skip deployment notification
        if: steps.detect.outputs.target == 'none'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('‚ö†Ô∏è No deployable target detected, skipping deployment');
            
            // Only notify if there's a related issue
            const hasIssue = '${{ steps.issue.outputs.has_issue }}' === 'true';
            if (hasIssue) {
              const issueNumber = parseInt('${{ steps.issue.outputs.issue_number }}');
              const releaseTag = '${{ steps.tag.outputs.release_tag }}';
              const releaseUrl = context.payload.release.html_url;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `‚ÑπÔ∏è Release [${releaseTag}](${releaseUrl}) created.\n\nNo automatic deployment configured for this project type.`
              });
            }
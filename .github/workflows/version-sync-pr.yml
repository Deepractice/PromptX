name: Version Sync PR

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for version sync'
        required: true
        type: choice
        options:
          - test
          - staging
          - main
      auto_merge:
        description: 'Add auto-merge label to PR'
        required: false
        type: boolean
        default: false
      bypass_checks:
        description: 'Bypass change detection (force create PR)'
        required: false
        type: boolean
        default: false

jobs:
  create-sync-pr:
    name: Create Version Sync PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate inputs and determine source branch
        id: branches
        run: |
          TARGET="${{ inputs.target_branch }}"
          
          # Determine source branch based on target
          case "$TARGET" in
            "test")
              SOURCE="develop"
              NPM_TAG="alpha"
              ;;
            "staging")
              SOURCE="test"
              NPM_TAG="beta"
              ;;
            "main")
              SOURCE="staging"
              NPM_TAG="latest"
              ;;
            *)
              echo "❌ Invalid target branch: $TARGET"
              exit 1
              ;;
          esac
          
          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          
          echo "📋 Sync configuration:"
          echo "  Source: $SOURCE"
          echo "  Target: $TARGET"
          echo "  NPM Tag: $NPM_TAG"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Check if branches exist
        run: |
          SOURCE="${{ steps.branches.outputs.source }}"
          TARGET="${{ steps.branches.outputs.target }}"
          
          # Check if source branch exists
          if ! git rev-parse --verify "origin/$SOURCE" >/dev/null 2>&1; then
            echo "❌ Source branch '$SOURCE' does not exist"
            exit 1
          fi
          
          # Check if target branch exists
          if ! git rev-parse --verify "origin/$TARGET" >/dev/null 2>&1; then
            echo "❌ Target branch '$TARGET' does not exist"
            exit 1
          fi
          
          echo "✅ Both branches exist"

      - name: Check for existing PR
        id: existing_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const source = '${{ steps.branches.outputs.source }}';
            const target = '${{ steps.branches.outputs.target }}';
            
            // Check for existing open PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${source}`,
              base: target
            });
            
            if (prs.length > 0) {
              const pr = prs[0];
              console.log(`⚠️ Found existing PR #${pr.number}: ${pr.title}`);
              console.log(`URL: ${pr.html_url}`);
              core.setOutput('exists', 'true');
              core.setOutput('pr_number', pr.number);
              core.setOutput('pr_url', pr.html_url);
              
              // Add comment to existing PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🔄 **Version sync requested** at ${new Date().toISOString()}\n\nThis PR already exists. Please review and merge if ready.`
              });
            } else {
              core.setOutput('exists', 'false');
            }

      - name: Check for changes
        if: steps.existing_pr.outputs.exists != 'true'
        id: changes
        run: |
          SOURCE="${{ steps.branches.outputs.source }}"
          TARGET="${{ steps.branches.outputs.target }}"
          BYPASS="${{ inputs.bypass_checks }}"
          
          # Fetch latest changes
          git fetch origin $SOURCE:$SOURCE
          git fetch origin $TARGET:$TARGET
          
          # Check if there are any commits to sync
          COMMITS=$(git rev-list --count $TARGET..$SOURCE)
          echo "📊 Commits to sync: $COMMITS"
          
          if [[ "$COMMITS" -eq 0 ]] && [[ "$BYPASS" != "true" ]]; then
            echo "❌ No changes to sync from $SOURCE to $TARGET"
            echo "ℹ️ Branches are already in sync"
            exit 1
          fi
          
          # Get commit details
          if [[ "$COMMITS" -gt 0 ]]; then
            echo "📝 Recent commits to sync:"
            git log --oneline $TARGET..$SOURCE --max-count=10
            
            # Get statistics
            CHANGED_FILES=$(git diff --name-only $TARGET..$SOURCE | wc -l)
            ADDITIONS=$(git diff --numstat $TARGET..$SOURCE | awk '{sum+=$1} END {print sum}')
            DELETIONS=$(git diff --numstat $TARGET..$SOURCE | awk '{sum+=$2} END {print sum}')
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commit_count=$COMMITS" >> $GITHUB_OUTPUT
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
            echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "⚠️ No changes but bypass is enabled, creating PR anyway"
          fi

      - name: Get version information
        if: steps.existing_pr.outputs.exists != 'true'
        id: version
        run: |
          SOURCE="${{ steps.branches.outputs.source }}"
          TARGET="${{ steps.branches.outputs.target }}"
          
          # Get version from source branch
          git checkout $SOURCE
          SOURCE_VERSION=$(node -p "require('./package.json').version")
          
          # Get version from target branch
          git checkout $TARGET
          TARGET_VERSION=$(node -p "require('./package.json').version")
          
          echo "source_version=$SOURCE_VERSION" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          
          echo "📦 Version sync:"
          echo "  Source version: $SOURCE_VERSION"
          echo "  Target version: $TARGET_VERSION"
          
          # Check if version is different
          if [[ "$SOURCE_VERSION" != "$TARGET_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version will be updated from $TARGET_VERSION to $SOURCE_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Version remains the same: $SOURCE_VERSION"
          fi

      - name: Create PR
        if: steps.existing_pr.outputs.exists != 'true'
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const source = '${{ steps.branches.outputs.source }}';
            const target = '${{ steps.branches.outputs.target }}';
            const npmTag = '${{ steps.branches.outputs.npm_tag }}';
            const commitCount = '${{ steps.changes.outputs.commit_count }}' || '0';
            const changedFiles = '${{ steps.changes.outputs.changed_files }}' || '0';
            const additions = '${{ steps.changes.outputs.additions }}' || '0';
            const deletions = '${{ steps.changes.outputs.deletions }}' || '0';
            const sourceVersion = '${{ steps.version.outputs.source_version }}';
            const targetVersion = '${{ steps.version.outputs.target_version }}';
            const versionChanged = '${{ steps.version.outputs.version_changed }}' === 'true';
            
            // Create PR title
            let title = `chore: sync ${source} → ${target}`;
            if (versionChanged) {
              title += ` (v${sourceVersion})`;
            }
            
            // Create PR body
            let body = `## 🔄 Version Sync PR\n\n`;
            body += `This PR synchronizes changes from \`${source}\` to \`${target}\` branch.\n\n`;
            
            // Version information
            body += `### 📦 Version Information\n`;
            if (versionChanged) {
              body += `- **Current version on ${target}**: \`${targetVersion}\`\n`;
              body += `- **New version from ${source}**: \`${sourceVersion}\` ✨\n`;
              body += `- **NPM tag after merge**: \`${npmTag}\`\n\n`;
            } else {
              body += `- **Version**: \`${sourceVersion}\` (no change)\n`;
              body += `- **NPM tag after merge**: \`${npmTag}\`\n\n`;
            }
            
            // Statistics
            body += `### 📊 Statistics\n`;
            body += `- **Commits to sync**: ${commitCount}\n`;
            body += `- **Files changed**: ${changedFiles}\n`;
            body += `- **Lines added**: +${additions}\n`;
            body += `- **Lines deleted**: -${deletions}\n\n`;
            
            // Workflow information
            body += `### 🤖 Automated Workflow\n`;
            body += `- **Source branch**: \`${source}\`\n`;
            body += `- **Target branch**: \`${target}\`\n`;
            body += `- **Triggered by**: @${context.actor}\n`;
            body += `- **Timestamp**: ${new Date().toISOString()}\n\n`;
            
            // Instructions
            body += `### ✅ Next Steps\n`;
            body += `1. Review the changes\n`;
            body += `2. Ensure CI checks pass\n`;
            body += `3. Merge when ready\n\n`;
            
            if ('${{ inputs.auto_merge }}' === 'true') {
              body += `> 🚀 **Auto-merge enabled**: This PR will be automatically merged once all checks pass.\n\n`;
            }
            
            // Footer
            body += `---\n`;
            body += `*This PR was automatically created by the Version Sync workflow.*`;
            
            // Create the PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              head: source,
              base: target,
              draft: false
            });
            
            console.log(`✅ Created PR #${pr.number}: ${pr.title}`);
            console.log(`URL: ${pr.html_url}`);
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_url', pr.html_url);
            
            // Add labels
            const labels = ['sync/version'];
            
            // Add branch-specific label
            labels.push(`target/${target}`);
            
            // Add version change label if applicable
            if (versionChanged) {
              labels.push('version/update');
            }
            
            // Add auto-merge label if requested
            if ('${{ inputs.auto_merge }}' === 'true') {
              labels.push('merge/auto');
              labels.push('merge/squash');
            }
            
            // Apply labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: labels
            });
            
            console.log(`🏷️ Added labels: ${labels.join(', ')}`);

      - name: Summary
        if: always()
        shell: sh
        run: |
          echo "## 📋 Version Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.existing_pr.outputs.exists }}" = "true" ]; then
            echo "⚠️ **Existing PR found**" >> $GITHUB_STEP_SUMMARY
            echo "- PR: #${{ steps.existing_pr.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
            echo "- URL: ${{ steps.existing_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          elif [ -n "${{ steps.create_pr.outputs.pr_number }}" ]; then
            echo "✅ **PR created successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- PR: #${{ steps.create_pr.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
            echo "- URL: ${{ steps.create_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
            echo "- Source: \`${{ steps.branches.outputs.source }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Target: \`${{ steps.branches.outputs.target }}\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.version.outputs.version_changed }}" = "true" ]; then
              echo "- Version: \`${{ steps.version.outputs.target_version }}\` → \`${{ steps.version.outputs.source_version }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ inputs.auto_merge }}" = "true" ]; then
              echo "- 🚀 Auto-merge enabled" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **No PR created**" >> $GITHUB_STEP_SUMMARY
            echo "- Likely no changes to sync or an error occurred" >> $GITHUB_STEP_SUMMARY
          fi
name: Test Command

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  run-tests:
    if: |
      github.event_name == 'pull_request' ||
      (github.event.comment && startsWith(github.event.comment.body, '/test'))
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
      checks: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            let testType = 'all';
            let options = '';
            
            // Â¶ÇÊûúÊòØÈÄöËøáËØÑËÆ∫Ëß¶ÂèëÁöÑÔºåËß£ÊûêÂëΩ‰ª§
            if (context.eventName === 'issue_comment') {
              const comment = context.payload.comment.body.trim();
              const match = comment.match(/^\/test(?:\s+(unit|integration|e2e|all|coverage))?(?:\s+(.*))?$/);
              
              if (!match) {
                core.setFailed('Invalid command format');
                return;
              }
              
              testType = match[1] || 'all';
              options = match[2] || '';
            } 
            // Â¶ÇÊûúÊòØ PR ‰∫ã‰ª∂Ëá™Âä®Ëß¶ÂèëÁöÑÔºåËøêË°åÊâÄÊúâÊµãËØï
            else if (context.eventName === 'pull_request') {
              console.log('Triggered by pull request event, running all tests');
              testType = 'all';
              options = '';
            }
            
            core.setOutput('test_type', testType);
            core.setOutput('options', options);
            
            console.log(`üß™ Test Type: ${testType}`);
            console.log(`‚öôÔ∏è Options: ${options || 'none'}`);
            
      - name: Detect test framework
        id: detect
        run: |
          echo "üîç Detecting test framework..."
          
          TEST_CMD=""
          FRAMEWORK=""
          
          # Check for Node.js project
          if [ -f "package.json" ]; then
            FRAMEWORK="node"
            echo "üì¶ Found package.json - Node.js project"
            
            # Check package manager
            if [ -f "pnpm-lock.yaml" ]; then
              PKG_MGR="pnpm"
            elif [ -f "yarn.lock" ]; then
              PKG_MGR="yarn"
            else
              PKG_MGR="npm"
            fi
            echo "üì¶ Package manager: $PKG_MGR"
            
            # Check for test scripts in package.json
            case "${{ steps.parse.outputs.test_type }}" in
              unit)
                if grep -q '"test:unit"' package.json; then
                  TEST_CMD="$PKG_MGR run test:unit"
                elif grep -q '"test-unit"' package.json; then
                  TEST_CMD="$PKG_MGR run test-unit"
                else
                  TEST_CMD="$PKG_MGR test -- --testPathPattern=unit"
                fi
                ;;
              integration)
                if grep -q '"test:integration"' package.json; then
                  TEST_CMD="$PKG_MGR run test:integration"
                elif grep -q '"test-integration"' package.json; then
                  TEST_CMD="$PKG_MGR run test-integration"
                else
                  TEST_CMD="$PKG_MGR test -- --testPathPattern=integration"
                fi
                ;;
              e2e)
                if grep -q '"test:e2e"' package.json; then
                  TEST_CMD="$PKG_MGR run test:e2e"
                elif grep -q '"test-e2e"' package.json; then
                  TEST_CMD="$PKG_MGR run test-e2e"
                elif grep -q '"e2e"' package.json; then
                  TEST_CMD="$PKG_MGR run e2e"
                else
                  TEST_CMD="$PKG_MGR test -- --testPathPattern=e2e"
                fi
                ;;
              coverage)
                if grep -q '"test:coverage"' package.json; then
                  TEST_CMD="$PKG_MGR run test:coverage"
                elif grep -q '"coverage"' package.json; then
                  TEST_CMD="$PKG_MGR run coverage"
                else
                  TEST_CMD="$PKG_MGR test -- --coverage"
                fi
                ;;
              all|*)
                TEST_CMD="$PKG_MGR test"
                ;;
            esac
            
          # Check for Python project
          elif [ -f "setup.py" ] || [ -f "pyproject.toml" ] || [ -f "requirements.txt" ]; then
            FRAMEWORK="python"
            echo "üêç Found Python project"
            
            case "${{ steps.parse.outputs.test_type }}" in
              unit)
                TEST_CMD="python -m pytest tests/unit -v"
                ;;
              integration)
                TEST_CMD="python -m pytest tests/integration -v"
                ;;
              e2e)
                TEST_CMD="python -m pytest tests/e2e -v"
                ;;
              coverage)
                TEST_CMD="python -m pytest --cov=. --cov-report=term-missing"
                ;;
              all|*)
                TEST_CMD="python -m pytest"
                ;;
            esac
            
          # Check for Go project
          elif [ -f "go.mod" ]; then
            FRAMEWORK="go"
            echo "üêπ Found go.mod - Go project"
            
            case "${{ steps.parse.outputs.test_type }}" in
              unit)
                TEST_CMD="go test -short ./..."
                ;;
              integration)
                TEST_CMD="go test -run Integration ./..."
                ;;
              e2e)
                TEST_CMD="go test -run E2E ./..."
                ;;
              coverage)
                TEST_CMD="go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out -o coverage.html"
                ;;
              all|*)
                TEST_CMD="go test -v ./..."
                ;;
            esac
            
          # Check for Makefile
          elif [ -f "Makefile" ]; then
            FRAMEWORK="make"
            echo "üîß Found Makefile"
            
            case "${{ steps.parse.outputs.test_type }}" in
              unit)
                if grep -q "^test-unit:" Makefile; then
                  TEST_CMD="make test-unit"
                else
                  TEST_CMD="make test"
                fi
                ;;
              integration)
                if grep -q "^test-integration:" Makefile; then
                  TEST_CMD="make test-integration"
                else
                  TEST_CMD="make test"
                fi
                ;;
              e2e)
                if grep -q "^test-e2e:" Makefile; then
                  TEST_CMD="make test-e2e"
                else
                  TEST_CMD="make test"
                fi
                ;;
              coverage)
                if grep -q "^test-coverage:" Makefile; then
                  TEST_CMD="make test-coverage"
                elif grep -q "^coverage:" Makefile; then
                  TEST_CMD="make coverage"
                else
                  TEST_CMD="make test"
                fi
                ;;
              all|*)
                TEST_CMD="make test"
                ;;
            esac
          else
            echo "‚ùå No test framework detected"
            exit 1
          fi
          
          echo "framework=$FRAMEWORK" >> $GITHUB_OUTPUT
          echo "test_cmd=$TEST_CMD" >> $GITHUB_OUTPUT
          echo "‚úÖ Test command: $TEST_CMD"
          
      - name: Setup Node.js
        if: steps.detect.outputs.framework == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python
        if: steps.detect.outputs.framework == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Setup Go
        if: steps.detect.outputs.framework == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Install dependencies
        run: |
          FRAMEWORK="${{ steps.detect.outputs.framework }}"
          
          case "$FRAMEWORK" in
            node)
              if [ -f "pnpm-lock.yaml" ]; then
                npm install -g pnpm
                pnpm install
              elif [ -f "yarn.lock" ]; then
                npm install -g yarn
                yarn install
              else
                npm ci || npm install
              fi
              ;;
            python)
              pip install -r requirements.txt || pip install pytest pytest-cov
              ;;
            go)
              go mod download
              ;;
          esac
          
      - name: Run tests
        id: test
        run: |
          echo "üß™ Running ${{ steps.parse.outputs.test_type }} tests..."
          echo "üìù Command: ${{ steps.detect.outputs.test_cmd }}"
          echo ""
          
          # Run tests and capture output
          set +e
          TEST_OUTPUT=$(mktemp)
          ${{ steps.detect.outputs.test_cmd }} 2>&1 | tee $TEST_OUTPUT
          TEST_EXIT_CODE=$?
          set -e
          
          # Extract summary (last 50 lines)
          SUMMARY=$(tail -n 50 $TEST_OUTPUT)
          
          # Set outputs
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests passed!"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed!"
          fi
          
          # Save summary for comment
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          exit $TEST_EXIT_CODE
          
      - name: Post results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const testType = '${{ steps.parse.outputs.test_type }}';
            const status = '${{ steps.test.outputs.status }}';
            const framework = '${{ steps.detect.outputs.framework }}';
            const testCmd = '${{ steps.detect.outputs.test_cmd }}';
            
            const icon = status === 'success' ? '‚úÖ' : '‚ùå';
            const statusText = status === 'success' ? 'PASSED' : 'FAILED';
            
            let message = `### ${icon} Test Results: ${statusText}\n\n`;
            message += `**Test Type:** ${testType}\n`;
            message += `**Framework:** ${framework}\n`;
            message += `**Command:** \`${testCmd}\`\n\n`;
            
            // Add test summary
            const summary = `${{ steps.test.outputs.summary }}`;
            if (summary) {
              message += `<details>\n<summary>Test Output (last 50 lines)</summary>\n\n`;
              message += '```\n' + summary + '\n```\n';
              message += `</details>\n\n`;
            }
            
            // Add link to full logs
            message += `üìù [View full logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            
            // Comment on issue or PR
            if (context.payload.issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            } else if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }